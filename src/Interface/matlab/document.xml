<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef Interface < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        ActionToolsUIFigure       matlab.ui.Figure
        FileMenu                  matlab.ui.container.Menu
        ExportMenu                matlab.ui.container.Menu
        RenderSettingsMenu        matlab.ui.container.Menu
        EffectsMenu               matlab.ui.container.Menu
        MotionMenu                matlab.ui.container.Menu
        ActionshotMenu            matlab.ui.container.Menu
        RemoveActionMenu          matlab.ui.container.Menu
        RGBTimewarpMenu           matlab.ui.container.Menu
        ColourCorrectionMenu      matlab.ui.container.Menu
        DesaturateMenu            matlab.ui.container.Menu
        BrightnessMenu            matlab.ui.container.Menu
        SaturationMenu            matlab.ui.container.Menu
        BlurandSharpenMenu        matlab.ui.container.Menu
        GaussianBlurMenu          matlab.ui.container.Menu
        UnsharpMaskMenu           matlab.ui.container.Menu
        GridLayout                matlab.ui.container.GridLayout
        LeftPanel                 matlab.ui.container.Panel
        ImagePathLabel            matlab.ui.control.Label
        ImagePathEditField        matlab.ui.control.EditField
        ImageExtensionLabel       matlab.ui.control.Label
        ImageExtensionEditField   matlab.ui.control.EditField
        LoadFootageButton         matlab.ui.control.Button
        BrowseButton              matlab.ui.control.Button
        ListBoxFootage            matlab.ui.control.ListBox
        FootageLabel              matlab.ui.control.Label
        CompositionsLabel         matlab.ui.control.Label
        ListBoxComp               matlab.ui.control.ListBox
        NewCompButton             matlab.ui.control.Button
        CreateCompositionFromCurrentDisplayButton  matlab.ui.control.Button
        CompositionBuilderButton  matlab.ui.control.StateButton
        RightPanel                matlab.ui.container.Panel
        Image3                    matlab.ui.control.Image
        ImageSliderLabel          matlab.ui.control.Label
        ImageSlider               matlab.ui.control.Slider
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
    end

    
    properties (Access = private)
        imageCell % Description
        currentFName % Description
        
        listBoxData={} % Description
        listBoxString={} % Description
        listBoxIndex=[] % Description
        
        compBoxData={}
        compBoxString={}
        compBoxIndex=[]
        RenderLocation='' % Description
        DialogApp % Description
    end
    
    methods (Access = public)
        
        function [lum] = luminance(~,r,g,b)
        lum=0.2126.*r+0.7152.*g+0.072.*b;
        end
        function [newVal]=linInterp(~,oldVal,oldMin,oldMax,newMin,newMax)
        x=oldMin:oldMax;
        y=linspace(newMin,newMax,length(x));
        newVal=(interp1(x,y,oldVal));
        end
        
        function updateRenderLocation(app, filepath)
        app.RenderLocation=(filepath);
        end
    end
    
    
    

    % Callbacks that handle component events
    methods (Access = private)

        % Callback function
        function RunButtonPushed(app, event)
        
        end

        % Button pushed function: LoadFootageButton
        function LoadFootageButtonPushed(app, event)
        try
            path=app.ImagePathEditField.Value;
            b=GenerateImageList(path,app.ImageExtensionEditField.Value);
            app.imageCell=ReadImages(path,b);
            app.ImageSlider.Enable=true;
            [~,d]=size(app.imageCell);
            app.ImageSlider.Limits=[1,d];
            app.Image3.ImageSource=app.imageCell{1};
            app.ImageSlider.Value=1;
            
            app.listBoxData{end+1}=app.imageCell;
            app.listBoxString{end+1}=app.currentFName;
            
            if (isempty(app.listBoxIndex))
                app.listBoxIndex(1)=1;
            else
                app.listBoxIndex(end+1)=(app.listBoxIndex(end)+1);
            end
            
            app.ListBoxFootage.Items=app.listBoxString;
            app.ListBoxFootage.ItemsData=app.listBoxIndex;
        catch
            text = sprintf('Failed to get images, check path and extension');
            uialert(app.ActionToolsUIFigure,text,'Error','Icon','error');
        end
        end

        % Value changed function: ImageSlider
        function ImageSliderValueChanged(app, event)
        
        end

        % Value changing function: ImageSlider
        function ImageSliderValueChanging(app, event)
        value = round(event.Value);
        app.Image3.ImageSource=app.imageCell{value};
        end

        % Button pushed function: BrowseButton
        function BrowseButtonPushed(app, event)
        [file,path] = uigetfile('*');
        app.ActionToolsUIFigure.Visible = 'off';
        app.ActionToolsUIFigure.Visible = 'on';
        if isequal(file,0)
            %user cancelled file browser
        else
            app.ImagePathEditField.Value=path;
            [~,app.currentFName,ext]=fileparts(file);
            app.ImageExtensionEditField.Value=erase(ext,'.');
            LoadFootageButtonPushed(app,matlab.ui.eventdata.ButtonPushedData)
        end
        end

        % Value changed function: ImageExtensionEditField
        function ImageExtensionEditFieldValueChanged(app, event)
        ext = app.ImageExtensionEditField.Value;
        app.ImageExtensionEditField.Value = erase(ext,'.');
        end

        % Menu selected function: ActionshotMenu
        function ActionshotMenuSelected(app, event)
        try
            imgData=app.imageCell;
            tic
            actionImage=ActionShot(imgData);
            ASt=toc;
            app.Image3.ImageSource=(actionImage);
            app.imageCell(:,:)={actionImage};
            text = sprintf('Operation Completed in... \n\n Action Shot: %17f s',ASt);
            uialert(app.ActionToolsUIFigure,text,'Success','Icon','success');
        catch
            text = sprintf('Images cannot be processed, check if images can be loaded before running. If not, images may vary in size.');
            uialert(app.ActionToolsUIFigure,text,'Error','Icon','error');
        end
        end

        % Menu selected function: RemoveActionMenu
        function RemoveActionMenuSelected(app, event)
        try
            imgData=app.imageCell;
            tic
            removeImage=RemoveAction(imgData);
            RAt=toc;
            app.Image3.ImageSource=(removeImage);
            app.imageCell(:,:)={removeImage};
            text = sprintf('Operation Completed in... \n\n Action Removed: %f s',RAt);
            uialert(app.ActionToolsUIFigure,text,'Success','Icon','success');
        catch
            text = sprintf('Images cannot be processed, check if images can be loaded before running. If not, images may vary in size.');
            uialert(app.ActionToolsUIFigure,text,'Error','Icon','error');
        end
        end

        % Value changed function: ListBoxFootage
        function ListBoxFootageValueChanged(app, event)
        if app.CompositionBuilderButton.Value==0
            value = app.ListBoxFootage.Value;
            app.imageCell=app.listBoxData(1,value);
            app.imageCell=vertcat(app.imageCell{:});
            app.Image3.ImageSource=app.imageCell{1};
            [~,d]=size(app.imageCell);
            app.ImageSlider.Limits=[1,d];
            app.ImageSlider.Value=1;
        else
            value = app.ListBoxFootage.Value;
            
            prompt = {'Frame To Insert At:'};
            dlgtitle = 'Insert Footage into Composition';
            dims=[1,50];
            definput = {'1'};
            insertFrame = (inputdlg(prompt,dlgtitle,dims,definput));
            insertFrame=str2double(insertFrame);
            numInsertedFrames=length(app.listBoxData{value});
            smallMatrix=app.listBoxData{value};
            [a,b,~]=size(smallMatrix{1});
            fullMatrix=app.imageCell(insertFrame:numInsertedFrames);
            for i=1:numInsertedFrames
                fullMatrix{i}(1:a,1:b,:)=smallMatrix{i};
            end
            app.imageCell(insertFrame:insertFrame+(numInsertedFrames-1))=fullMatrix;
            
        end
        end

        % Button pushed function: NewCompButton
        function NewCompButtonPushed(app, event)
        prompt = {'Enter Composition Name:','Enter Composition Width:','Enter Composition Height:','Enter Composition Length (Frames):'};
        dlgtitle = 'Create New Composition';
        dims=[1,50];
        newCompRes = inputdlg(prompt,dlgtitle,dims);
        newName=char(newCompRes(1));
        frameData(1)=str2double(newCompRes(2));
        frameData(2)=str2double(newCompRes(3));
        frameData(3)=str2double(newCompRes(4));
        
        if (isempty(app.compBoxIndex))
            app.compBoxIndex(1)=1;
        else
            app.compBoxIndex(end+1)=(app.compBoxIndex(end)+1);
        end
        app.compBoxString{end+1}=newName;
        newCompImgList=zeros(frameData(2),frameData(1),3,'uint8');
        newCompImgList=repmat({newCompImgList},1,frameData(3));
        app.compBoxData{end+1}=newCompImgList;
        
        app.ListBoxComp.Items=app.compBoxString;
        app.ListBoxComp.ItemsData=app.compBoxIndex;
        
        
        end

        % Value changed function: ListBoxComp
        function ListBoxCompValueChanged(app, event)
        value = app.ListBoxComp.Value;
        app.imageCell=app.compBoxData(1,value);
        app.imageCell=vertcat(app.imageCell{:});
        app.Image3.ImageSource=app.imageCell{1};
        [~,d]=size(app.imageCell);
        app.ImageSlider.Limits=[1,d];
        app.ImageSlider.Value=1;
        app.ImageSlider.Enable=true;
        end

        % Button pushed function: 
        % CreateCompositionFromCurrentDisplayButton
        function CreateCompositionFromCurrentDisplayButtonPushed(app, event)
        prompt = {'Enter Composition Name:'};
        dlgtitle = 'Create New Composition from Current Display';
        dims=[1,50];
        newCompRes = inputdlg(prompt,dlgtitle,dims);
        newName=char(newCompRes(1));
        if (isempty(app.compBoxIndex))
            app.compBoxIndex(1)=1;
        else
            app.compBoxIndex(end+1)=(app.compBoxIndex(end)+1);
        end
        app.compBoxString{end+1}=newName;
        newCompImgList=app.imageCell;
        app.compBoxData{end+1}=newCompImgList;
        app.ListBoxComp.Items=app.compBoxString;
        app.ListBoxComp.ItemsData=app.compBoxIndex;
        end

        % Menu selected function: DesaturateMenu
        function DesaturateMenuSelected(app, event)
        ArrayedImageCell=cat(4,app.imageCell{1:length(app.imageCell)});
        a=luminance(app, ArrayedImageCell(:,:,1,:),ArrayedImageCell(:,:,2,:),ArrayedImageCell(:,:,3,:));
        a=repmat(a,1,1,3);
        a=(num2cell(a,1:3));
        a=reshape(num2cell(a,1:3),1,[]);
        a=(vertcat(a{:}))';
        app.imageCell=a;
        app.Image3.ImageSource=app.imageCell{1};
        end

        % Menu selected function: RGBTimewarpMenu
        function RGBTimewarpMenuSelected(app, event)
        ArrayedImageCell=cat(4,app.imageCell{1:length(app.imageCell)});
        OrigArrayedIC=ArrayedImageCell;
        len=size(ArrayedImageCell,4);
        prompt = {'Shift Red:','Shift Green:','Shift Blue'};
        dlgtitle = 'Apply RGB Time Split';
        dims=[1,50];
        definput = {'1','0','-1'};
        SplitVals = (inputdlg(prompt,dlgtitle,dims,definput));
        SplitVals=cellfun(@str2double,SplitVals);
        for i=1:len
            try
                ArrayedImageCell(:,:,1,i)=OrigArrayedIC(:,:,1,i+SplitVals(1));
            end
            try
                ArrayedImageCell(:,:,2,i)=OrigArrayedIC(:,:,2,i+SplitVals(2));
            end
            try
                ArrayedImageCell(:,:,3,i)=OrigArrayedIC(:,:,3,i+SplitVals(3));
            end
        end
        a=(num2cell(ArrayedImageCell,1:3));
        a=reshape(num2cell(a,1:3),1,[]);
        a=(vertcat(a{:}))';
        app.imageCell=a;
        app.Image3.ImageSource=app.imageCell{1};
        end

        % Menu selected function: BrightnessMenu
        function BrightnessMenuSelected(app, event)
        try
            prompt = {'Brightness: (-100 to 100)'};
            dlgtitle = 'Apply Brightness';
            dims=[1,50];
            definput = {'1'};
            bVal = (inputdlg(prompt,dlgtitle,dims,definput));
            bVal=str2double(bVal);
            bVal=linInterp(app,bVal,-100,100,0,2);
            ArrayedImageCell=cat(4,app.imageCell{1:length(app.imageCell)});
            ArrayedImageCell=ArrayedImageCell*bVal;
            a=(num2cell(ArrayedImageCell,1:3));
            a=reshape(num2cell(a,1:3),1,[]);
            a=(vertcat(a{:}))';
            app.imageCell=a;
            app.Image3.ImageSource=app.imageCell{1};
        catch
        end
        end

        % Menu selected function: GaussianBlurMenu
        function GaussianBlurMenuSelected(app, event)
        try
            prompt = {'Gaussian Blur Amount: (0 to 100)'};
            dlgtitle = 'Gaussian Blur';
            dims=[1,50];
            definput = {'0'};
            bVal = (inputdlg(prompt,dlgtitle,dims,definput));
            bVal=str2double(bVal);
            bVal=linInterp(app,bVal,0,100,0,10);
            app.imageCell=cellfun(@(x) imgaussfilt(x,bVal),app.imageCell,'UniformOutput',false);
            app.Image3.ImageSource=app.imageCell{1};
        catch
        end
        end

        % Menu selected function: UnsharpMaskMenu
        function UnsharpMaskMenuSelected(app, event)
        prompt = {'Radius: (0 to 100)','Amount: (0 to 100)'};
        dlgtitle = 'Unsharp Mask';
        dims=[1,50];
        definput = {'0','0'};
        SplitVals = (inputdlg(prompt,dlgtitle,dims,definput));
        SplitVals=cellfun(@str2double,SplitVals);
        SplitVals(1)=linInterp(app,SplitVals(1),0,100,0,5);
        SplitVals(2)=linInterp(app,SplitVals(2),0,100,0,5);
        app.imageCell=cellfun(@(x) imsharpen(x,'Radius',SplitVals(1),'Amount',SplitVals(2)),app.imageCell,'UniformOutput',false);
        app.Image3.ImageSource=app.imageCell{1};
        end

        % Menu selected function: SaturationMenu
        function SaturationMenuSelected(app, event)
        %try
        prompt = {'Saturation (-100 to 100):'};
        dlgtitle = 'Adjust Saturation';
        dims=[1,50];
        definput = {'0'};
        satVal = (inputdlg(prompt,dlgtitle,dims,definput));
        satVal=str2double(satVal);
        satVal=linInterp(app,satVal,-100,100,0,2);
        %             x=-100:100;
        %             y=linspace(0,2,length(x));
        %             satVal=(interp1(x,y,satVal));
        
        ArrayedImageCell=cellfun(@rgb2hsv,app.imageCell,'UniformOutput',false);
        ArrayedImageCell=cat(4,ArrayedImageCell{1:length(ArrayedImageCell)});
        ArrayedImageCell(:,:,2,:)=ArrayedImageCell(:,:,2,:).*satVal;
        a=(num2cell(ArrayedImageCell,1:3));
        a=reshape(num2cell(a,1:3),1,[]);
        a=(vertcat(a{:}))';
        a=cellfun(@hsv2rgb,a,'UniformOutput',false);
        app.imageCell=a;
        app.Image3.ImageSource=app.imageCell{1};
        %catch
        %end
        end

        % Key press function: ActionToolsUIFigure
        function ActionToolsUIFigureKeyPress(app, event)
        key = event.Key;
        if strcmp(key,'space')
            try
                app.ImageSlider.Value=app.ImageSlider.Value+1;
                value = round(app.ImageSlider.Value);
                app.Image3.ImageSource=app.imageCell{value};
            catch
                app.ImageSlider.Value=1;
                value = round(app.ImageSlider.Value);
                app.Image3.ImageSource=app.imageCell{value};
            end
        end
        
        end

        % Menu selected function: ExportMenu
        function ExportMenuSelected(app, event)
        
        end

        % Menu selected function: RenderSettingsMenu
        function RenderSettingsMenuSelected(app, event)
        app.DialogApp = RenderSettings(app);
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.ActionToolsUIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 2x1 grid
                app.GridLayout.RowHeight = {749, 749};
                app.GridLayout.ColumnWidth = {'1x'};
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 1;
            else
                % Change to a 1x2 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {358, '1x'};
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 2;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create ActionToolsUIFigure and hide until all components are created
            app.ActionToolsUIFigure = uifigure('Visible', 'off');
            app.ActionToolsUIFigure.AutoResizeChildren = 'off';
            app.ActionToolsUIFigure.Color = [0.502 0.502 0.502];
            app.ActionToolsUIFigure.Position = [100 100 1236 749];
            app.ActionToolsUIFigure.Name = 'Action Tools';
            app.ActionToolsUIFigure.Resize = 'off';
            app.ActionToolsUIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);
            app.ActionToolsUIFigure.KeyPressFcn = createCallbackFcn(app, @ActionToolsUIFigureKeyPress, true);

            % Create FileMenu
            app.FileMenu = uimenu(app.ActionToolsUIFigure);
            app.FileMenu.Text = 'File';

            % Create ExportMenu
            app.ExportMenu = uimenu(app.FileMenu);
            app.ExportMenu.MenuSelectedFcn = createCallbackFcn(app, @ExportMenuSelected, true);
            app.ExportMenu.Text = 'Export';

            % Create RenderSettingsMenu
            app.RenderSettingsMenu = uimenu(app.ExportMenu);
            app.RenderSettingsMenu.MenuSelectedFcn = createCallbackFcn(app, @RenderSettingsMenuSelected, true);
            app.RenderSettingsMenu.Text = 'Render Settings';

            % Create EffectsMenu
            app.EffectsMenu = uimenu(app.ActionToolsUIFigure);
            app.EffectsMenu.Text = 'Effects';

            % Create MotionMenu
            app.MotionMenu = uimenu(app.EffectsMenu);
            app.MotionMenu.Text = 'Motion';

            % Create ActionshotMenu
            app.ActionshotMenu = uimenu(app.MotionMenu);
            app.ActionshotMenu.MenuSelectedFcn = createCallbackFcn(app, @ActionshotMenuSelected, true);
            app.ActionshotMenu.Text = 'Actionshot';

            % Create RemoveActionMenu
            app.RemoveActionMenu = uimenu(app.MotionMenu);
            app.RemoveActionMenu.MenuSelectedFcn = createCallbackFcn(app, @RemoveActionMenuSelected, true);
            app.RemoveActionMenu.Text = 'Remove Action';

            % Create RGBTimewarpMenu
            app.RGBTimewarpMenu = uimenu(app.MotionMenu);
            app.RGBTimewarpMenu.MenuSelectedFcn = createCallbackFcn(app, @RGBTimewarpMenuSelected, true);
            app.RGBTimewarpMenu.Text = 'RGB Timewarp';

            % Create ColourCorrectionMenu
            app.ColourCorrectionMenu = uimenu(app.EffectsMenu);
            app.ColourCorrectionMenu.Text = 'Colour Correction';

            % Create DesaturateMenu
            app.DesaturateMenu = uimenu(app.ColourCorrectionMenu);
            app.DesaturateMenu.MenuSelectedFcn = createCallbackFcn(app, @DesaturateMenuSelected, true);
            app.DesaturateMenu.Text = 'Desaturate';

            % Create BrightnessMenu
            app.BrightnessMenu = uimenu(app.ColourCorrectionMenu);
            app.BrightnessMenu.MenuSelectedFcn = createCallbackFcn(app, @BrightnessMenuSelected, true);
            app.BrightnessMenu.Text = 'Brightness';

            % Create SaturationMenu
            app.SaturationMenu = uimenu(app.ColourCorrectionMenu);
            app.SaturationMenu.MenuSelectedFcn = createCallbackFcn(app, @SaturationMenuSelected, true);
            app.SaturationMenu.Text = 'Saturation';

            % Create BlurandSharpenMenu
            app.BlurandSharpenMenu = uimenu(app.EffectsMenu);
            app.BlurandSharpenMenu.Text = 'Blur and Sharpen';

            % Create GaussianBlurMenu
            app.GaussianBlurMenu = uimenu(app.BlurandSharpenMenu);
            app.GaussianBlurMenu.MenuSelectedFcn = createCallbackFcn(app, @GaussianBlurMenuSelected, true);
            app.GaussianBlurMenu.Text = 'Gaussian Blur';

            % Create UnsharpMaskMenu
            app.UnsharpMaskMenu = uimenu(app.BlurandSharpenMenu);
            app.UnsharpMaskMenu.MenuSelectedFcn = createCallbackFcn(app, @UnsharpMaskMenuSelected, true);
            app.UnsharpMaskMenu.Text = 'Unsharp Mask';

            % Create GridLayout
            app.GridLayout = uigridlayout(app.ActionToolsUIFigure);
            app.GridLayout.ColumnWidth = {358, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;

            % Create ImagePathLabel
            app.ImagePathLabel = uilabel(app.LeftPanel);
            app.ImagePathLabel.HorizontalAlignment = 'right';
            app.ImagePathLabel.Position = [17 711 70 22];
            app.ImagePathLabel.Text = 'Image Path:';

            % Create ImagePathEditField
            app.ImagePathEditField = uieditfield(app.LeftPanel, 'text');
            app.ImagePathEditField.Tooltip = {'Enter folder path where images are located'};
            app.ImagePathEditField.Position = [133 711 164 22];

            % Create ImageExtensionLabel
            app.ImageExtensionLabel = uilabel(app.LeftPanel);
            app.ImageExtensionLabel.HorizontalAlignment = 'right';
            app.ImageExtensionLabel.Position = [17 678 98 22];
            app.ImageExtensionLabel.Text = 'Image Extension:';

            % Create ImageExtensionEditField
            app.ImageExtensionEditField = uieditfield(app.LeftPanel, 'text');
            app.ImageExtensionEditField.ValueChangedFcn = createCallbackFcn(app, @ImageExtensionEditFieldValueChanged, true);
            app.ImageExtensionEditField.Tooltip = {'Enter file extension of images'};
            app.ImageExtensionEditField.Position = [133 678 43 22];

            % Create LoadFootageButton
            app.LoadFootageButton = uibutton(app.LeftPanel, 'push');
            app.LoadFootageButton.ButtonPushedFcn = createCallbackFcn(app, @LoadFootageButtonPushed, true);
            app.LoadFootageButton.Position = [133 640 164 22];
            app.LoadFootageButton.Text = 'Load Footage';

            % Create BrowseButton
            app.BrowseButton = uibutton(app.LeftPanel, 'push');
            app.BrowseButton.ButtonPushedFcn = createCallbackFcn(app, @BrowseButtonPushed, true);
            app.BrowseButton.Tooltip = {'Select any image from the folder and import the list'};
            app.BrowseButton.Position = [197 678 100 22];
            app.BrowseButton.Text = 'Browse';

            % Create ListBoxFootage
            app.ListBoxFootage = uilistbox(app.LeftPanel);
            app.ListBoxFootage.Items = {};
            app.ListBoxFootage.ValueChangedFcn = createCallbackFcn(app, @ListBoxFootageValueChanged, true);
            app.ListBoxFootage.Position = [16 313 314 266];
            app.ListBoxFootage.Value = {};

            % Create FootageLabel
            app.FootageLabel = uilabel(app.LeftPanel);
            app.FootageLabel.Position = [17 586 50 22];
            app.FootageLabel.Text = 'Footage';

            % Create CompositionsLabel
            app.CompositionsLabel = uilabel(app.LeftPanel);
            app.CompositionsLabel.Position = [17 270 78 22];
            app.CompositionsLabel.Text = 'Compositions';

            % Create ListBoxComp
            app.ListBoxComp = uilistbox(app.LeftPanel);
            app.ListBoxComp.Items = {};
            app.ListBoxComp.ValueChangedFcn = createCallbackFcn(app, @ListBoxCompValueChanged, true);
            app.ListBoxComp.Position = [17 110 314 157];
            app.ListBoxComp.Value = {};

            % Create NewCompButton
            app.NewCompButton = uibutton(app.LeftPanel, 'push');
            app.NewCompButton.ButtonPushedFcn = createCallbackFcn(app, @NewCompButtonPushed, true);
            app.NewCompButton.Position = [17 78 78 22];
            app.NewCompButton.Text = 'New Comp';

            % Create CreateCompositionFromCurrentDisplayButton
            app.CreateCompositionFromCurrentDisplayButton = uibutton(app.LeftPanel, 'push');
            app.CreateCompositionFromCurrentDisplayButton.ButtonPushedFcn = createCallbackFcn(app, @CreateCompositionFromCurrentDisplayButtonPushed, true);
            app.CreateCompositionFromCurrentDisplayButton.Position = [17 46 314 22];
            app.CreateCompositionFromCurrentDisplayButton.Text = 'Create Composition From Current Display';

            % Create CompositionBuilderButton
            app.CompositionBuilderButton = uibutton(app.LeftPanel, 'state');
            app.CompositionBuilderButton.Text = 'Composition Builder';
            app.CompositionBuilderButton.Position = [114 78 123 22];

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 2;

            % Create Image3
            app.Image3 = uiimage(app.RightPanel);
            app.Image3.Position = [14 227 840 485];

            % Create ImageSliderLabel
            app.ImageSliderLabel = uilabel(app.RightPanel);
            app.ImageSliderLabel.HorizontalAlignment = 'right';
            app.ImageSliderLabel.Position = [14 176 39 22];
            app.ImageSliderLabel.Text = 'Image';

            % Create ImageSlider
            app.ImageSlider = uislider(app.RightPanel);
            app.ImageSlider.Limits = [1 10];
            app.ImageSlider.ValueChangedFcn = createCallbackFcn(app, @ImageSliderValueChanged, true);
            app.ImageSlider.ValueChangingFcn = createCallbackFcn(app, @ImageSliderValueChanging, true);
            app.ImageSlider.Enable = 'off';
            app.ImageSlider.Position = [74 185 748 3];
            app.ImageSlider.Value = 1;

            % Show the figure after all components are created
            app.ActionToolsUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = Interface

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.ActionToolsUIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.ActionToolsUIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>